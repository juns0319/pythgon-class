"""
A,B =map(int,input().split())
print(A+B)

A,B =map(int,input().split())
print(A-B)

A,B =map(int,input().split())
print(A*B)

A,B =map(int,input().split())
print(A/B)

A,B =map(int,input().split())
print(A+B)

print(A-B)

print(A*B)

print(A//B)

print(A%B)

x=input()
print(x +"??!")

y =int(input())       #-543
print(y-543)

a, b, c=map(int,input().split())  #a,b,c로 나누기
print(a +b +c)

# \\    \/\\
#  \)  \( \'\)
# \(  \/  \)
#  \\\(__\)\|

# \    /\
#  )  ( ')
# (  /  )
#  \(__)|

print("\\    /\\")
print(" )  ( \')")
print("(  /  )")
print(" \\(__)|")

"""

#입출력과 사칙연산 (나머지,곱셈,개) !숙제
"""
A ,B ,C =map(int,input().split())
print((A+B)%C)
print(((A%C) + (B%C))%C)
print((A*B)%C)
print(((A%C) * (B%C))%C)

A=int(input())
B=int(input())
Bb=list(map(int,str(B)))
print(Bb[2]*A)
print(Bb[1]*A)
print(Bb[0]*A)
print(A*B)
"""
# |\_/|
# |q p|   /}
# ( 0 )"""\
# |"^"`    |
# ||_/=\\__|

print("|\\_/|")
print("|q p|   /}")
print("( 0 )\"\"\"\\")
print("|\"^\"`    |")
print("||_/=\\\\__|")




#\n =enter
#산술연산자, 바교연산자, 논라연산자(and, or, not)
#비교연산자

#불(True, False)
#비교연산자의 판단에 따라 출력
# == 같다
# != 다르다
#문자열또한 구분 가능
#문자열또한 대소 비교 가능
#아스키코드로 비교가능
# is 값이 같더라도 자료형이 다르면 False반환
"""
a =1
print(id(1))
print(id(1.0))
print(id(a))
print(id('a'))
print(id(97))
"""

#논라연산자
#and,or,not
#and, or 2개의 값 필요
#not 1개의 값만 필요
#and 양쪽 모두 참인경우 True반환
#or 양족 중 적어도 하나 이상 참인 경우 True반환
#not 참값의 반대 값을 반환
#not, and, or 순서로 진행

#bool
#int,float 0은 False o을 제외한 모든 숫자는 true
#문자열에서 '',""(null) 제외 모든 문자열은 True

#단락평가: 첫번째 값으로 결과가 확정적이라면 두번째 값은 판단하지 않는 것
#마지막으로 단락평가를 실행한 값을 반환
"""
korean =92
english =47
mathematics =86
science =81

print((korean >49) and (english >49)and(mathematics >49) and(science >49))
"""

#문자열
#'' 혹은 ""로 생성
#''',"""로 줄 변환
#\로 (함수)도 문자로
#"""는 """가 다시 나올때까지 문자열로 인식

#리스트

# []로 묶으면 리스트가 되고, ,(콤마)로 구분합니다
#a =[123, 23, 4, 1, 10, 12]
# 리스트에 저장된 값 요소를 element라 합니다
# 자료형: int, str, float, bool, list, complex, range, tuple
# 자료형 전부다 리스트로 변환 가능
#range 또한 자료형
#range(start_elem, end_elem, step)(시작
#range의 마지막 값은 표시X

#tuple 값 추가,변경,삭제 불가능
#튜플에서 값을 지우고 싶다면 리스트로 변환 후 삭제 그리고 다시 튜플로 전환
#요소가 변경되어서는 안되는 경우

#리스트와 튜플에 문자열을 넣는다면 하나씩 분리돠서 출력

#a, b, c = 10, 20, 30 은 튜플
#튜플 = a, b ,c

# range() 함수를 이용해서 tuple 만들기
# (-5, -2, 1, 4, 7, 10)
#여기서 음수 값 제거해보기

t1 =tuple(range(-5, 13, 3))
num =0

while num <=0:
  if t1[num] <=0:
    t1 =list(t1)
    del t1[num]
    tuple(t1)
  elif t1[num] >=0:
    num +=1

print(t1)


"""
t1 =tuple(range(-5, 13, 3))
num =0

while num <=0:
  if t1[num] <=0:
    t1 =list(t1)
    del t1[num]
    tuple(t1)
  elif t1[num] >=0:
    num +=1

print(t1)
"""

#bytes(1바이트 단위의 값을 연속적으로 저장하는 시퀀스 자료형)
#Byte array(아스키코드 값을 문자열로)(16진수)

#시퀀스 객체안에 특정 값이 있는지 확인가능

#확인할 값 in 시퀀스 객체(not 붙으면 없는지 확인)

#시퀀스 객체를 +연산자를 활용하여 연결 가능 (튜플도 가능) (range는 불가능)

#시퀀스 자료형의 +기호는 "연결
#숫자 자료형에서의 +기호는 "산술연산"

#반복은 *로

#시퀀스 자료형 is, not is, 연결(+) 반복
#단 연결, 반복은 range는 불가능

#시퀀스 자료형 종류: list, tuple, range, str

#len(시퀀스 객체)로 길이구하기
#문자열 공백까지 표시하나 '는 문자열을 표시하는 거라면 불가능

#index: 시퀀스 객체의 순서
#시퀀스 자료형 [순번]
#시퀀스 객체에 [] 붙이고 인덱스 번호로 접근하면 해당 값에 접근 가능
#인덱스는 0부터 시작
#인덱스를 -로 기입하면 뒤에서부터 자료를 꺼내온다
#-에는 0부터 시작하는게 아니라 -1부터 시작한다
#길이를 벗어나면 에러
#인덱스로 값 할당가능(튜플,레인지,문자열(str)은 불가능(읽기 전용))

#rwx: read write excute

#del, 변경은 리스트에서만 가능

#슬라이싱: 객체의 일부를 잘라내는 것
#끝 인덱스는 가지고 오려 하지 않음
#끝 인덱스는 가져오려는 인덱스보다 1을 터 크게 지정
#[1:1] 빈 인덱스 출력
#-인덱스도 사용가능
#아무것도 안넣으면 끝까지 [:]

#증가폭(range 참고) 사용 가능
#시퀀스 자료형: a[start :end :step]
#증가폭에 -가 들어가면 거꾸로

year =[2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018]
population =[1, 2, 3, 4, 5, 6, 7, 8]
"""
print(year[:4:-1])
print(population[:4:-1])
"""
"""
print(year[5:])       #-3
print(population[5:]) #-3
"""
"""
x =str(input())
y =int(input())

print(x[y -1])
"""
"""
x =str(input())

print(len(x))
"""

#백준 문자열의 문자열 풀어오기!

"""
n =int(input())
a =list()
b =0
STR = ''
while b !=n:
    STR =str(input())
    a.append(STR)
    STR =''
    b +=1
b =0
while b !=n:
    STR =str(a[b])
    print(STR[0] +STR[-1])
    b +=1
"""


#bool True, False
#파이썬 연산자: 논리연산자, 산술연산자, 비교연산자

#슬라이싱하면 다른 객체(리스트, 튜플, 레인지)


#딕셔너리(dictionary,사전)
#a ={'key': 'value', 'key2': 'value2'}
#키는 같은 값 존재 불가능, 밸류는 가능
#print(a['key'])
#중복되는 키는 저장 불가능
#리스트: 정수, 불, 실수, 문자열, 튜플
#리스트는 값 변경 불가능
#리스트, 딕셔너리는 key값으로 사용불가(바뀔 수 있어서)

#메모리 상의 주소가 변경된다(바뀐다)
#딕셔너리는 dict({},[],())혹은 {}로 생성
#zip함수 이용
#key값, vlaue값이 넘치면 무시
#dict함수 쓸때는key값에 '', ""사용 금지
#dict이름에 key값
#a =[1:'one', 2:'two']
#print(a[1]) 'one'
#키 미지정 시, 없는 키일시 에러
#in으로 확인시 key값만 확인 가능
#.values()를 통해 value값 확인 가능
#.keys()로 key값 확인가능
#len으로 key의 숫자 확인가능
#.items()key하고 value같이 출력
#{}사용시 :만 가능

"""
temp =dict({'메로나':1000, '폴라포':1200, '빵빠레':1800})
temp['죠스바'] =1200
temp['월드콘'] =1500
del temp['메로나']
print(temp)
"""

"""
inventory =dict({'메로나':300, '비비빅':400, '죠스바':250})
inventory['월드콘'] =500
print(sum(inventory.values()))
#.update()를 통하여 딕셔너리끼리 더하기 가능
"""

"""
keys =("apple", "pear", "peach")
vals =(300, 250, 400)
results =dict(zip(keys,vals))
print(results)

ap =48584
m =36
print(ap*m)
"""

a ={1:'one', 2:'two', 3:'three'}
b =a
b[4] ='four'

print(a) #{1:'one', 2:'two', 3:'three'}
print(b) #{1:'one', 2:'two', 3:'three', 4:'four'}
print(a==b) #False
print(a is b) #False


#dict(딕셔너리)
#자기 자체를 함수로 선언하면 다른 객체가 된다.

# a ={1:'one', 2:'two', 3:'three'}
# b =a
# b[4] ='four'
#
# print(a) #{1:'one', 2:'two', 3:'three'} -{1:'one', 2:'two', 3:'three', 4:'four'}
# print(b) #{1:'one', 2:'two', 3:'three', 4:'four'}
# print(a==b) #False -True
# print(a is b) #False -True

#논리연산자, 산술연산자, 비교연산자

#set (집합)

#모든 자료를 자료형에 관계없이 넣을 수 있으면 컨테이너 자료형
#시퀀스 자료형: 값이 연속적인 자료를 담을 수 있다.
#dict와 set은 인덱스 번호를 가져올 수 없다.
#요소(element)의 인덱스를 가져올 수 있는가?

#if :들여쓰기 잘하기
"""
n =int(input())

if (n%2) ==0:
    print('짝수')
else:
    print('홀수')

n =int(input())
n1 =n +20
if n1>=256:
    print(255)
else:
    print(n1)


n =int(input())
n1 =n -20
if n1 <=256:
    if n1 <=0:
        print(0)
    else:
        print(n1)
else:
    print(255)


s =input("현재시간:")

n =int(s[3:]) #스플릿도 가능
if n ==0:
    print("정각 입니다.")
else:
    print("정각이 아닙니다.")

fruit = ["사과", "포도", "홍시"]
s =input("좋아하는 과일은? ")

if s in fruit:
    print("정답입니다.")
else:
    print("오답입니다.")

fruit = {"봄" : "딸기", "여름" : "토마토", "가을" : "사과"}
s =input("좋아하는 과일은? ")
if s in fruit.values():
    print("정답입니다.")
else:
    print("오답입니다.")

a =input()
if a.islower():
    print(a.upper())
else:
    print(a.lower())

#위에서 확인한거 다시 확인할 필요 없음
n =int(input("score: "))
if 81 <=n <=100:
    print("A")
elif 61 <=n <=80:
    print("B")
elif 41 <=n <=60:
    print("C")
elif 21 <=n <=40:
    print("D")
else:
    print("E")
"""

money ={"달러":1167, "엔":1.096, "유로":1268, "위안":171}
s =input("입력: ").split()
n =int(s[0])
memory =0
for i in money:
    if s[1] == i:
        n =n*money[i]
print(n)

#파이썬 300제 129번 문제 숙제
# .split()



inp1 =input("주민등록번호: ")
inp1li =[]
for j in range(len(inp1)):
    inp1li.append(inp1[j])
inp2 =inp1li[:]
n =[2, 3, 4, 5, 6, 7, 8, 9, 2, 3, 4, 5]
lis =list()
le =len(inp1li) -1
for i in range(le):
    if inp1li[i] == "-":
        del inp1li[i]
i =0
le =len(inp1li) -1
if len(inp1li) ==13:
    for i in range(le):
        lis.append(int(inp1li[i]) *n[i])
else:
    quit()
n =sum(lis)
print(n)
print(inp2[len(inp2)-1])
print(n%11)
print(11 -(n%11))
print(11 -(n%11) == inp2[len(inp2)-1])
if 11 -(n%11) == inp2[len(inp2)-1]:
    print("유효한 주민등록번호입니다.")
else:
    print("유효하지 않은 주민등록번호입니다.")

# inp1 =input("주민등록번호: ")
# inp1li =[]
# for j in range(len(inp1)):
#     inp1li.append(inp1[j])
# inp2 =inp1li[:]
# n =[2, 3, 4, 5, 6, 7, 8, 9, 2, 3, 4, 5]
# lis =list()
# le =len(inp1li) -1
# for i in range(le):
#     if inp1li[i] == "-":
#         del inp1li[i]
# i =0
# le =len(inp1li) -1
# if len(inp1li) ==13:
#     for i in range(le):
#         lis.append(int(inp1li[i]) *n[i])
# else:
#     quit()
# n =sum(lis)
# print(n)
#
# if int(11 -(n%11)) == int(inp2[len(inp2)-1]):
#     print("유효한 주민등록번호입니다.")
# else:
#     print("유효하지 않은 주민등록번호입니다.")

#replace 활용

# x =[49, -17, 25, 102, 8, 62, 21]
# for i in x:
#     print(i*10, end= " ")

#enumerate 사용시 튜플 형태로 출력

#for문은 내가 얼마나 반복해야하는지 알고있을 떄
#while 반복횟수가 불분명할 떄 단 조건을 알 때

# n =100

# i =2
# j =5
#
# while i <33 or j>0 :
#     print(i, j)
#     i *= 2
#     j -=1

# lis =['dog', 'cat', 'parrot']
# for i in lis:
#     print(i[0])

# lis =[3, -20, -3, 44]
# for i in lis:
#     if i <0:
#         print(i)

# A, B =map(int, input().split())
# if A >B:
#     print(">")
# elif A <B:
#     print("<")
# else:
#     print("==")

# n =int(input())
#
# if n >89:
#     print("A")
# elif n >79:
#     print("B")
# elif n >69:
#     print("C")
# elif n >59:
#     print("D")
# else:
#     print("F")

# y =int(input())
#
# if y%4 ==0:
#     if y%100 ==0:
#         if y%400 ==0:
#             print(1)
#         else:
#             print(0)
#     else:
#         print(1)
# else:
#     print(0)
# year =int(input())


#백준 단계별로 풀기 조건문 4,5,6 풀기

